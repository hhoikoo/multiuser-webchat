services:
  redis:
    image: redis:7-alpine
    container_name: chat-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - chat-network

  web:
    build:
      context: .
      dockerfile: Dockerfile
    image: chat-app:latest
    restart: unless-stopped
    environment:
      - HOST=0.0.0.0
      - PORT=8080
      - WORKERS=1
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8080/healthz')",
        ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - chat-network
    # Use deploy.replicas for scaling (requires docker compose, not docker-compose)
    deploy:
      replicas: ${WEB_REPLICAS:-4}
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  nginx:
    image: nginx:alpine
    container_name: chat-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/healthz",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - chat-network

networks:
  chat-network:
    driver: bridge
